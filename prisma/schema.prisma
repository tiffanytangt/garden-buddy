generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  username        String    @unique
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  hashed_password String

  Account        Account?
  Plants         Plant[]
  Session        Session[]
  JournalEntries JournalEntry[]
  Reminders      Reminder[]
  Notifications  Notification[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Photo {
  id                Int                @id @default(autoincrement())
  location          String
  createdAt         DateTime           @default(now())
  deletedAt         DateTime?
  Plant             Plant?
  JournalEntryPhoto JournalEntryPhoto?
}

model JournalEntry {
  id          Int      @id @default(autoincrement())
  description String
  entryDate   DateTime

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  plantId            Int?
  plant              Plant?              @relation(fields: [plantId], references: [id], onDelete: Cascade)
  JournalEntryPhotos JournalEntryPhoto[]
}

model JournalEntryPhoto {
  photoId        Int @id
  journalEntryId Int

  Photo        Photo        @relation(fields: [photoId], references: [id])
  JournalEntry JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
}

model Plant {
  id          Int      @id @default(autoincrement())
  userId      String
  slug        String
  displayName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  photo_id    Int?     @unique
  photo       Photo?   @relation(fields: [photo_id], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  JournalEntries JournalEntry[]

  @@unique([userId, slug])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Reminder {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  title            String
  description      String?
  date             DateTime
  time             DateTime?
  isCompleted      Boolean           @default(false)
  createdAt        DateTime          @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime          @updatedAt
  RecurringPattern RecurringPattern?
  Notifications    Notification[]
}

model RecurringPattern {
  id         Int                @id @default(autoincrement())
  reminder   Reminder           @relation(fields: [reminderId], references: [id])
  reminderId Int                @unique
  frequency  RecurringFrequency
  interval   Int                @default(1) // e.g., every 1 day, every 2 weeks
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Notification {
  id               Int              @id @default(autoincrement())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  notificationTime DateTime
  isSent           Boolean          @default(false)
  isRead           Boolean          @default(false)
  type             NotificationType
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  reminder   Reminder? @relation(fields: [reminderId], references: [id])
  reminderId Int?
}

enum NotificationType {
  REMINDER
}
